# -*- coding: utf-8 -*-
"""Copie de Epreuve.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1beO_Fbviy2DsLPd1eypHelgJhiRBhymm

---

# **Challenge DataTour 2024 : Prévision de la production d’énergie solaire en Afrique**

---

### **Contexte**

L’accès à une énergie fiable reste un défi de taille en Afrique subsaharienne, où de nombreuses régions dépendent de générateurs ou de systèmes solaires autonomes. Cependant, la production d’énergie solaire peut fluctuer sous l’effet de multiples facteurs : conditions météorologiques, demande locale, infrastructures disponibles, etc.

Ce défi de prévision est essentiel pour permettre aux décideurs d’allouer au mieux l’énergie disponible et d’identifier les zones prioritaires pour les installations solaires supplémentaires. En travaillant sur ce problème, vous contribuez à la mission de transformer l’accès à l’électricité en Afrique !

---

### **Objectif de la Compétition**
Développer un modèle de régression performant pour prédire la **demande énergétique projetée** (`demande_energetique_projectee`) dans différentes régions. Les modèles les plus précis permettront de prioriser les zones où les infrastructures énergétiques pourraient être optimisées.

---

### **Structure des Données**

Les données sont divisées en trois fichiers distincts :

1. **Données d’entraînement** (`train.csv`) :
   - **Taille** : 150 000 lignes.
   - **Colonnes** : Comprend toutes les colonnes, y compris la cible `demande_energetique_projectee`.
   - **Utilisation** : Ces données servent à entraîner les modèles.
   - **Source** : https://raw.githubusercontent.com/dataafriquehub/energy_data/refs/heads/main/train.csv

2. **Données de test** (`test.csv`) :
   - **Taille** : 62 500 lignes.
   - **Colonnes** : Comprend toutes les colonnes, y compris la cible `demande_energetique_projectee`.
   - **Utilisation** : Ce fichier est fourni pour ajuster et évaluer la performance du modèle avant la soumission finale.
   - **Source** : https://raw.githubusercontent.com/dataafriquehub/energy_data/refs/heads/main/test.csv

3. **Fichier de soumission** (`submission.csv`) :
   - **Taille** : 25 000 lignes.
   - **Colonnes** : Contient toutes les caractéristiques sauf la colonne cible `demande_energetique_projectee`.
   - **Utilisation** : Ce fichier doit être utilisé pour générer les prédictions finales, sans accès à la colonne cible.
   - **Source** : https://raw.githubusercontent.com/dataafriquehub/energy_data/refs/heads/main/submission.csv

---

### **Description des colonnes**

| Colonne                              | Description                                                                                                    |
|--------------------------------------|----------------------------------------------------------------------------------------------------------------|
| `country`                            | Le pays où se situe la région.                                                                                 |
| `lat`, `lon`                         | Latitude et longitude de la région, permettant d'analyser les conditions géographiques.                        |
| `population`                         | Population de la région, un indicateur de la demande énergétique potentielle.                                  |
| `taux_ensoleillement`                | Moyenne du taux d'ensoleillement annuel, indiquant le potentiel solaire de la région.                          |
| `demande_energetique_actuelle`       | La demande énergétique actuelle de la région.                                                                  |
| `demande_energetique_projectee`      | **Variable cible** – La demande énergétique projetée pour la région (à prédire dans le fichier de soumission). |
| `capacite_installee_actuelle`        | La capacité énergétique actuelle installée dans la région.                                                     |
| `duree_ensoleillement_annuel`        | Nombre moyen d'heures d'ensoleillement annuel, influençant le potentiel de production solaire.                 |
| `cout_installation_solaire`          | Coût moyen pour installer des infrastructures solaires dans la région.                                        |
| `proximite_infrastructures_energetiques` | Distance aux infrastructures énergétiques existantes, influençant l'accès à l'énergie.                    |
| `taux_adoption_energies_renouvelables` | Pourcentage de la population utilisant des énergies renouvelables.                                         |
| `stabilite_politique`                | Score de stabilité politique, un facteur pouvant affecter les investissements énergétiques.                    |
| `taux_acces_energie`                 | Pourcentage de la population ayant actuellement accès à l'énergie.                                            |
| `niveau_urbanisation`                | Niveau d'urbanisation de la région, lié à l'infrastructure et à la demande en énergie.                        |
| `potentiel_investissement`           | Indicateur de l'intérêt potentiel pour des investissements énergétiques dans la région.                        |
| `types_sols`                         | Type de sol dans la région, pouvant affecter la faisabilité des infrastructures solaires.                      |
| `emissions_co2_evitees`              | Estimation des émissions de CO₂ évitées grâce aux énergies renouvelables installées.                          |
| `idh`                                | Indice de développement humain, un facteur socio-économique influençant la demande énergétique.                |
| `habit_de_mariage`                   | Tradition vestimentaire locale lors des mariages, incluse pour ajouter de la variété dans les données.         |
| `nombre_animaux_domestiques`         | Nombre moyen d'animaux domestiques par foyer, inclus pour ajouter de la variété dans les données.              |

---

### **Tâches pour les participants**

1. **Analyse Exploratoire des Données (EDA)** :
   - Analyser les relations entre les caractéristiques et identifier celles qui influencent le plus `demande_energetique_projectee`.
   - Examiner les distributions, les valeurs manquantes, et les éventuels prétraitements nécessaires.

2. **Développement et ajustement du modèle** :
   - Utiliser les données d’entraînement (`train.csv`) pour construire un modèle de prédiction de la demande énergétique.
   - Ajuster le modèle en utilisant les données de test (`test.csv`), qui inclut la cible `demande_energetique_projectee`, pour maximiser la précision du modèle.
   - **Note** : Bien que le fichier de test contienne la cible, les participants doivent éviter le surajustement en utilisant des méthodes de validation appropriées (cross-validation, etc.).

3. **Prédictions sur le fichier de soumission** :
   - Appliquer le modèle optimisé au fichier `submission.csv` pour prédire la `demande_energetique_projectee`.
   - Générer un fichier de soumission avec les identifiants et les prédictions, conformément au format spécifié ci-dessous.

---

### **Format de la soumission**
Les participants doivent soumettre un fichier CSV avec exactement les colonnes suivantes :

- **`id`** : L'identifiant de chaque ligne dans `submission.csv`.
- **`demande_energetique_projectee`** : La prédiction de la demande énergétique projetée pour chaque ligne.

Exemple de format attendu :
```csv
id,demande_energetique_projectee
1,12345.67
2,8910.11
3,34567.89
...
```

---

### **Critères d'évaluation**

1. **Métrique de performance** :
   - La précision des prédictions sera évaluée à l'aide de la **Root Mean Squared Error (RMSE)**, une métrique standard pour mesurer les erreurs de régression.
   - La RMSE sera calculée en comparant les prédictions avec les valeurs réelles de `demande_energetique_projectee`, que seules les équipes organisatrices possèdent.

2. **Classement** :
   - Les scores RMSE seront utilisés pour classer les participants. Les équipes avec les scores les plus bas, indiquant une meilleure précision, seront classées en tête.

---

### **Consignes supplémentaires**
- **Utilisation des données de test** : Les participants sont autorisés à utiliser le fichier `test.csv` pour ajuster leur modèle, mais doivent veiller à ne pas surajuster pour garantir une bonne généralisation sur le fichier de soumission.
- **Conformité du fichier de soumission** : Les fichiers qui ne respectent pas le format spécifié seront rejetés. Assurez-vous que les prédictions sont alignées correctement avec les identifiants des lignes dans `submission.csv`.

---

Cette épreuve encourage une compréhension approfondie des caractéristiques et une modélisation rigoureuse pour optimiser les prédictions de la demande énergétique en Afrique.

**Prêts à relever le défi et à transformer l'accès à l'électricité en Afrique ? Rejoignez la compétition DataTour 2024 dès aujourd’hui et faites partie de cette révolution énergétique !**

# **Installation et Importation des bibliotheques utiles**
"""

# Importation des Librairies
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import OneHotEncoder, PolynomialFeatures, LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error, make_scorer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Lasso, Ridge, LinearRegression, SGDRegressor
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.model_selection import GridSearchCV

# Load the dataset from the provided URL
df = pd.read_csv('https://raw.githubusercontent.com/dataafriquehub/energy_data/refs/heads/main/train.csv')
df.to_csv('train.csv', index=False)

# Display the first few rows of the dataframe to understand its structure
display(df.head())

# Check for missing values and data types
print(df.info())

# Summary statistics of the dataset
display(df.describe())

# Visualize the distribution of the target variable 'demande_energetique_projectee'
sns.histplot(df['demande_energetique_projectee'], kde=True)
plt.title('Distribution of Demande Energetique Projectee')
plt.xlabel('Demande Energetique Projectee')
plt.ylabel('Frequency')
plt.show()

# Afficher les types de données pour mieux comprendre la structure
print("Types de données dans le dataset:")
print(df.dtypes)

# Afficher les statistiques descriptives des variables numériques
print("Statistiques descriptives des variables numériques:")
display(df.select_dtypes(include=['float64', 'int64']).describe())

# Filter the dataframe to include only numeric columns
numeric_df = df.select_dtypes(include=['float64', 'int64'])

# Calculate the correlation matrix for numeric columns
correlation_matrix = numeric_df.corr()

# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='coolwarm', cbar=True)
plt.title('Correlation Matrix')
plt.show()

# Display the correlation of each variable with the target variable
target_correlation = correlation_matrix['demande_energetique_projectee'].sort_values(ascending=False)
print("Correlation with demande_energetique_projectee:")
display(target_correlation)

df.columns

rmse_list_train = []
rmse_list_test = []

def create_features(df):
    # 1. Ratios
    df['demande_par_habitant'] = df['demande_energetique_actuelle'] / df['population']
    df['capacite_relative'] = df['capacite_installee_actuelle'] / df['demande_energetique_actuelle']

    # 2. Interactions entre variables
    df['ensoleillement_capacite'] = df['taux_ensoleillement'] * df['capacite_installee_actuelle']
    df['stabilite_invest'] = df['stabilite_politique'] * df['potentiel_investissement']

    # 4. Regroupement par 'country'
    df['moyenne_demande_pays'] = df.groupby('country')['demande_energetique_actuelle'].transform('mean')
    df['ecart_moyenne_pays'] = df['demande_energetique_actuelle'] - df['moyenne_demande_pays']

    return df

def preprocess_dataframe(df):
    # Impute missing values by the mean of each country
    df['taux_adoption_energies_renouvelables'] = df.groupby('country')['taux_adoption_energies_renouvelables'].transform(lambda x: x.fillna(x.mean() * 0))

    # Creation de nouvelles features
    # df = create_features(df)

    # LabelEncoder encode the categorical variables

    encoder = LabelEncoder()
    columns_to_drop = ['types_sols', 'habit_de_mariage', 'nombre_animaux_domestiques','lat', 'lon',]


    if 'demande_energetique_projectee' in df.columns:
        columns_to_drop.append('demande_energetique_projectee')
        df_new = df.drop(columns=columns_to_drop)
    else:
        df_new = df.drop(columns=columns_to_drop)

    # Encode Country column
    # df_new['country_encoded'] = encoder.fit_transform(df_new['country'])

    df_new = df_new.drop(columns=['country'])

    return df_new


def evaluate_model(model, features, target):
    # Generate predictions
    prediction = model.predict(features)

    # Calculate RMSE
    rmse = np.sqrt(mean_squared_error(target, prediction))  # Set squared=False to get RMSE

    # Display the RMSE
    print(f"RMSE: {rmse}")

    return prediction, rmse

# df est le dataframe du train dataset
train_df = df.copy()
X_train = preprocess_dataframe(train_df).values
y_train = train_df['demande_energetique_projectee'].values

preprocess_dataframe(df).columns

X_train.shape

preprocess_dataframe(df).head()

# Dictionnaire des parametres des 3 algos de regression

param_grid_lasso = {
    'lasso__alpha': np.logspace(-4, 1, 50),   # Régularisation fine
    'lasso__max_iter': [500, 1000, 5000, 10000],   # Convergence
    'lasso__tol': [1e-4, 1e-3, 1e-2],         # Tolérance pour convergence
    'lasso__selection': ['cyclic', 'random']  # Méthode de sélection des coefficients
}

param_grid_ridge = {
            'ridge__alpha': np.logspace(-4, 3, 10),  # Régularisation
            'ridge__solver': ['auto', 'svd', 'cholesky'],  # Méthodes de résolution
}

param_grid_sgdr = {
            'sgdregressor__alpha': np.logspace(-4, 3, 10),  # Régularisation
            'sgdregressor__penalty': ['l2', 'l1', 'elasticnet'],  # Type de régularisation
            'sgdregressor__max_iter': [1000, 5000],  # Limite d'itérations
            'sgdregressor__learning_rate': ['constant', 'optimal'],  # Stratégie de taux d'apprentissage
}

def grid_search_pipeline(model, param_grid):

  pipeline = make_pipeline(
      StandardScaler(),
      MinMaxScaler(),
      # scalers[4],
      model,
  )

  # Configuration du GridSearchCV
  grid_search = GridSearchCV(
      estimator=pipeline,
      param_grid=param_grid,
      scoring=make_scorer(mean_squared_error, greater_is_better=False),  # Minimise RMSE
      cv=5,  # Validation croisée à 5 folds
      verbose=1,
      n_jobs=-1  # Utilise tous les cœurs disponibles
  )

  return grid_search

# Entraînement
grid_search = grid_search_pipeline(model=Lasso(), param_grid=param_grid_lasso)
grid_search.fit(X_train, y_train)

# Afficher les meilleurs hyperparamètres
print(f"Best Parameters: {grid_search.best_params_}")
print(f"Best Score : {-grid_search.best_score_}")

# Ré-entraînement sur les meilleurs paramètres
best_model = grid_search.best_estimator_

# Calcul RMSE du train dataset
train_prediction, rmse_train = evaluate_model(best_model, X_train, y_train)

"""# Test Dataset"""

df_test = pd.read_csv('https://raw.githubusercontent.com/dataafriquehub/energy_data/refs/heads/main/test.csv')
X_test = preprocess_dataframe(df_test).values
# df_test.to_csv('test.csv', index=False)
# predict and evaluate test data
y_test = df_test['demande_energetique_projectee'].values

test_prediction, rmse_test = evaluate_model(best_model, X_test, y_test) # calcul du RMSE du test dataset

"""# Validation Dataset"""

rmse_list_train.append(rmse_train)
rmse_list_test.append(rmse_test)

print(rmse_list_train)
print(rmse_list_test)

from google.colab import drive
drive.mount('/content/drive')

df_data_val = pd.read_csv('https://raw.githubusercontent.com/dataafriquehub/energy_data/refs/heads/main/submission.csv')
val_data = preprocess_dataframe(df_data_val).values
# df_data_val.to_csv('raw_submission.csv', index=False)
submission_df = pd.DataFrame({
    'id': df_data_val.index + 1,
    'demande_energetique_projectee': best_model.predict(val_data)
})

submission_df.to_csv('/content/drive/MyDrive/Project/submission5.0.csv', index=False)

submission_df.shape

submission_df.head(10)

